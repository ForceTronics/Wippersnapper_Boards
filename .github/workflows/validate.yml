name: Validate JSON and Filenames

on: [pull_request]

jobs:
  validate-board-definition:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Validate Board JSON
        uses: nhalstead/validate-json-action@0.1.3
        with:
          # Schema Docs: https://ajv.js.org/json-schema.html#json-data-type
          schema: /boards/schema.json
          jsons: boards/*/definition.json

      - name: List Changed Board Files
        id: changed-files
        uses: tj-actions/changed-files@v21
        with:
          files: boards/**/*

      - name: Validate Only Expected Filenames
        env:
          FILES: ${{ steps.changed-files.outputs.renamed_files }} ${{ steps.changed-files.outputs.added_files }}
        run: |
          EXIT_VALUE=0
          board_definition_regex="^boards\/.*\/(definition\.json|((image|images\/(boot-(drive|loader)|drag-drop|reset|usb))\.(png|jpe?g|gif|svg)))$"

          for FILE in $FILES; do
            if [[ $FILE =~ $board_definition_regex ]]; then
              echo "✅ $FILE"
            else
              echo "❌ $FILE"
              EXIT_VALUE=1
            fi
          done

          exit $EXIT_VALUE

      - name: Validate Image File Extension<->Mimetype Agreement
        env:
          FILES: ${{ steps.changed-files.outputs.renamed_files }} ${{ steps.changed-files.outputs.added_files }}
        run: |
          EXIT_VALUE=0

          for FILE in $FILES; do
            if [[ $FILE == */definition.json ]]; then
              continue # non-image file
            fi

            # extract each file's mimetype and extension
            MIME=`file -b --mime-type $FILE`
            EXT="${FILE##*.}"

            # ad-hoc check that extension matches mimetype
            if [[ "image/$EXT" == $MIME || ($EXT == "jpg" && $MIME == "image/jpeg") || ($EXT == "svg" && ($MIME == "image/svg+xml" || $MIME == "text/xml")) ]]; then
              # Match!
              echo "✅ $FILE"

            else
              # Doesn't match? Give helpful report

              # split the mimetype on '/'
              IFS='/'
              read -a SPLIT_MIME <<< "$MIME"
              IFS=' '
              # take the last item
              MIME_EXT=${SPLIT_MIME[-1]}

              if [[ "$MIME_EXT" == "xml" ]]; then
                MIME_EXT="svg"
              else if [[ "$MIME_EXT" == "jpeg" ]]; then
                MIME_EXT="jpg"
              fi

              echo "❌ $FILE: wrong file extension, expected .$MIME_EXT"

              EXIT_VALUE=1
            fi
          done

          exit $EXIT_VALUE


      - uses: mfinelli/setup-imagemagick@v1

      - name: Validate Image Dimensions
        env:
          FILES: ${{ steps.changed-files.outputs.renamed_files }} ${{ steps.changed-files.outputs.added_files }}
        run: |
          EXIT_VALUE=0

          MAX_WIDTH=800
          MAX_HEIGHT=2000

          for FILE in $FILES; do
            if [[ $FILE == */definition.json ]]; then
              continue # non-image file
            fi

            # use imagemagick for the width
            WIDTH=`identify -ping -format "%w" $FILE`
            BAD_WIDTH=false
            if [[ "$WIDTH" -gt "$MAX_WIDTH" ]]; then
              EXIT_VALUE=1
              BAD_WIDTH=true
            fi

            # use imagemagick for the height
            HEIGHT=`identify -ping -format "%h" $FILE`
            BAD_HEIGHT=false
            if [[ "$HEIGHT" -gt "$MAX_HEIGHT" ]]; then
              EXIT_VALUE=1
              BAD_HEIGHT=true
            fi

            if [[ $BAD_WIDTH = true || $BAD_HEIGHT = true ]]; then
              echo "❌ $FILE  ($WIDTH x $HEIGHT)"
              if [[ $BAD_WIDTH = true ]]; then
                echo "  ↔️ width must be 800 pixels or less"
              fi

              if [[ $BAD_HEIGHT = true ]]; then
                echo "  ↕️ height must be 2000 pixels or less"
              fi

            else
              echo "✅ $FILE $WIDTH x $HEIGHT"
            fi
          done

          if [[ $EXIT_VALUE = 1 ]]; then
            echo "Fix these ☝️ issues by resizing your images to fit inside ${MAX_WIDTH}x${MAX_HEIGHT}."
          fi

          exit $EXIT_VALUE

      - name: Validate Image File Sizes
        env:
          FILES: ${{ steps.changed-files.outputs.renamed_files }} ${{ steps.changed-files.outputs.added_files }}
        run: |
          EXIT_VALUE=0

          MAX_FILESIZE=$((400*1024)) # 400kb

          for FILE in $FILES; do
            if [[ $FILE == */definition.json ]]; then
              continue # non-image file
            fi

            FILESIZE=$(stat -c%s "$FILE")

            if [[ "$FILESIZE" -gt "$MAX_FILESIZE"  ]]; then
              EXIT_VALUE=1
              echo "❌ $FILE ($FILESIZE)"

            else
              echo "✅ $FILE ($FILESIZE)"
            fi
          done

          if [[ $EXIT_VALUE = 1 ]]; then
            echo "These image files ☝️ are too large, they must be smaller than 400kb. You can try:"
            echo "- using an image compressor"
            echo "- exporting at lower quality settings"
            echo "- exporting a different image format (jpg, png, svg, etc)"
            echo "- shrinking the image's dimensions before exporting"
          fi

          exit $EXIT_VALUE
