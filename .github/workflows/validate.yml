name: Validate JSON and Filenames

on: [pull_request]

jobs:
  validate-board-definition:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # - name: Validate Board JSON
      #   uses: nhalstead/validate-json-action@0.1.3
      #   with:
      #     # Schema Docs: https://ajv.js.org/json-schema.html#json-data-type
      #     schema: /boards/schema.json
      #     jsons: boards/*/definition.json

      - name: List Changed Board Files
        id: changed-files
        uses: tj-actions/changed-files@v21
        with:
          files: boards/**/*

      # - name: Validate Only Expected Filenames
      #   env:
      #     FILES: ${{ steps.changed-files.outputs.renamed_files }} ${{ steps.changed-files.outputs.added_files }}
      #   run: |
      #     exit_value=0
      #     board_definition_regex="^boards\/.*\/(definition\.json|((image|images\/(boot-(drive|loader)|drag-drop|reset|usb))\.(png|jpe?g|gif|svg)))$"
      #
      #     for file in $FILES; do
      #       if [[ $file =~ $board_definition_regex ]]; then
      #         echo "✅ $file"
      #       else
      #         echo "❌ $file"
      #         exit_value=1
      #       fi
      #     done
      #
      #     exit $exit_value
      #
      # - name: Validate Image File Extension<->Mimetype Agreement
      #   env:
      #     FILES: ${{ steps.changed-files.outputs.renamed_files }} ${{ steps.changed-files.outputs.added_files }}
      #   run: |
      #     exit_value=0
      #
      #     for file in $FILES; do
      #       # check each file's mimetype matches its extension
      #       MIME=`file -b --mime-type $file`
      #       EXT="${file##*.}"
      #
      #       if [[ "image/$EXT" == $MIME || ($EXT == "jpg" && $MIME == "image/jpeg") || ($EXT == "svg" && $MIME == "image/svg+xml") ]]; then
      #         echo "✅ $file"
      #
      #       else
      #         # Doesn't match? Report it helpfully
      #         # split the mimetype on '/'
      #         IFS='/'
      #         read -a SPLIT_MIME <<< "$MIME"
      #         IFS=' '
      #         MIME_EXT=${SPLIT_MIME[-1]} # last item
      #         NEW_FILE="${file%.$EXT}.$MIME_EXT"
      #         echo "❌ $file: rename to $NEW_FILE"
      #
      #         exit_value=1
      #       fi
      #     done
      #
      #     exit $exit_value


      - uses: mfinelli/setup-imagemagick@v1

      # - name: Validate Image Dimensions
      #   env:
      #     FILES: ${{ steps.changed-files.outputs.renamed_files }} ${{ steps.changed-files.outputs.added_files }}
      #   run: |
      #     exit_value=0
      #
      #     MAX_WIDTH=800
      #     MAX_HEIGHT=2000
      #
      #     for file in $FILES; do
      #       # use imagemagick for the width
      #       WIDTH=`identify -ping -format "%w" $file`
      #       BAD_WIDTH=false
      #       if [[ "$WIDTH" -gt "$MAX_WIDTH" ]]; then
      #         exit_value=1
      #         BAD_WIDTH=true
      #       fi
      #
      #       # use imagemagick for the height
      #       HEIGHT=`identify -ping -format "%h" $file`
      #       BAD_HEIGHT=false
      #       if [[ "$HEIGHT" -gt "$MAX_HEIGHT" ]]; then
      #         exit_value=1
      #         BAD_HEIGHT=true
      #       fi
      #
      #       if [[ $BAD_WIDTH = true || $BAD_HEIGHT = true ]]; then
      #         echo "❌ $file  ($WIDTH x $HEIGHT)"
      #         if [[ $BAD_WIDTH = true ]]; then
      #           echo "  ↔️ width must be 800 pixels or less"
      #         fi
      #
      #         if [[ $BAD_HEIGHT = true ]]; then
      #           echo "  ↕️ height must be 2000 pixels or less"
      #         fi
      #
      #       else
      #         echo "✅ $file $WIDTH x $HEIGHT"
      #       fi
      #     done
      #
      #     if [[ $exit_value = 1 ]]; then
      #       echo "Resize your images to fix these ☝️ issues."
      #     fi
      #
      #     exit $exit_value

      - name: Optimize All Image Files
        run: echo "TODO"

      - name: Validate Image File Sizes
        env:
          FILES: ${{ steps.changed-files.outputs.renamed_files }} ${{ steps.changed-files.outputs.added_files }}
        run: |
          exit_value=0

          MAX_FILESIZE=$((400*1024)) # 400kb

          for file in $FILES; do
            FILESIZE=$(stat -c%s "$file")

            if [[ "$FILESIZE" -gt "$MAX_FILESIZE"  ]]; then
              echo "❌ $file is too large! ($FILESIZE > $MAX_FILESIZE)"

            else
              echo "✅ $file ($FILESIZE)"
            fi
          done

          exit $exit_value

      - name: Add & Commit (maybe branch and PR?)
        run: echo "TODO"

      - name: Leave Helpful Comment
        run: echo "TODO"
